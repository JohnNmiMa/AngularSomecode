AngularJS Design
1) SomeCodeCtrl - general app controller
2) Header
    * HeaderCtrl - the header controller
    * snippet-search directive
3) TopicPanel
    * TopicPanelCtrl - the topicbar controller
    * topicPanel directive
    * topic directive
4) SnippetBar
    * SnippetBarCtrl - the snippetbar controller
5) SnippetContainer
    * SnippetContainerCtrl - the snippet container controller
    * snippet directive
    * snippet-selector directive
    * SnippetService - makes $http calls to the server
    * SnippetSort - a filter to display the snippets

* The header is in all views
* The ng-view contains the TopicBar, SnippetBar
   and SnippetContainer

Directory Structure:
    static
        - contains SomeCodeCtrl
        - contains shared snippets
        components
            header
            - header.html
            - header.js
            - contains HeaderCtrl
            topicpanel
            - topicpanel.js : topicPanel & topic directives
            - topicpanel.html
            - topic.html
            - topicpanel.less
            snippetbar
            - snippetbar.js
            - snippetbar.html
            - snippetbar.less
            snippets
            - snippets.js : snippet & snippetPopup directives
            - snippets.html
            - snippetPopup.less
            - snippets.less
        - contains snippet-search directive
        signedout : view when signed out
        - signedout.html
        - signedout.css
        - signedout.js
        user : view when signed in
        - user.html
        - user.less
        - user.js
        app.js : app controller
        appViews.js
        appRoutes.js
        snippetLibrary.js
        oauthLibrary.js
        main.less/css
        reset.less
        variables.less
    templates
        index.html - the only rendered html file on the server. It also is an angular template

Implement logged out view - DONE
- Create header - DONE
- Get Flask server running for home page - DONE
- Get Flask server authenticating with Google, Facebook, Twitter OAuth - DONE
  - Get protocol running for one provider - DONE
  - Save token from server away - DONE
  - Create interceptor to insert token header - DONE
- Create SnippetBar - DONE
  - Render Create & Layout icons - DONE
    - hide create button if logged out - DONE
  !- Keep SnippetBar from scrolling off top of page
Implement signed-in view
- Finish SnippetBar - DONE
  - Display Selected Topic - DONE
  !- Implement Topic Sort Order Selector
    !- Add alphabetical & chronolocal sorts
    !- Investigate Custom Sort Order
      !- how to move items in list and keep track of index
      !- add custom sort order field in DB
    - TopicBar ToggleIcon - DONE
      !- investigate ngAnimate - DONE (tough to animate)
      !- how to rotate icon?
- Create TopicBar
  !- how to resize topicbar? - DID & DONE :-)
  !- how to keep topicbar fixed as snippet container scrolls?
  - ngRepeat for list of topics - DONE
    - display all snippets for a selected topic - DONE
  - Topic CRUD - DONE
    - Create - DONE
    - Edit - DONE
    - Delete - DONE
- Create Snippet CRUD Form
  - Implement SnippetBar Create Icon - DONE
  - Add Save/Cancel buttons - DONE
    - Update DB if snippet is added
  - Add public/private selector - DONE
    - Update DB to proper public/private state
  - Add topic selector - DONE
  - Add language selector
- Create Snippet Container - DONE
  - Display all snippets in a topic - DONE
  - Implement SnippetBar Layout Icons - DONE
- Create Snippet Selector - DONE
  - Render Snip-it, layout, edit, and delete icons - DONE
  - Implement layout icons - DONE
  - Implement edit icon - DONE
    - Show Snippet CRUD Form - DONE
  - Implement delete icon - DONE
    - add delete dialog
- Implement CodeMirror Snippet Code Text-Area
  - Create separate test textarea with full implementation - DONE
  - Port test to somecode - DONE (WOW, the implementation worked out great!)
    - make form part of snippet, not something separate when editing - DONE
      - this means to just have a textarea, not a div and textarea where we
        flip back and forth depending upon if we are editing or not. - DONE
    - add ui-codemirror and ui-codemirror-opts to textarea - DONE
      - add codemirror editor options in directive - DONE
    - Show code border when editing - DONE
    - Show textarea outline fuzz when textarea is selected - DONE
    - add cancelEdit to directive - DONE
    - get textarea ngModel loading and persisting from/to server - DONE
    - implement select for different languages - DONE
      - enhance server model to save away snippet language - DONE
    - implement toggling of line numbers - DONE
    - implement toggling of line wrapping - DONE
    - implement toggling of scrolling - DONE

- Get gulp build working - DONE
  - enable '$ gulp' to start flask server - DONE
  - enable '$ gulp build' to create release build - DONE
    - get uglified/minified - DONE
      - fix all 'explicit function annotation' errors - DONE

- Deploy Flask server to a python service that will work with SQLite

- Get public/personal icon working when editing/creating snippets
- Get prompt on snippet delete implemented
- Get snippet count implemented in header search bar
- Mode "Log Out" selector to gear. - maybe

!- Implement Snippet Description/Note Text-Area
  - Add WYSYWIG JavaScript HTML editor for snippet description text-area

    One of the keys to this entire app is to provide a great code and
    description input experience. The description area must offer the following:
     * Bullets: bullets need to be indented properly.
     * Numbered lists, where numbers can be started and then continued from where
       they were left off. Just starting at "1" each time a numbered list is started
       is bad.

       Here is an example how bullets and numbered lists should be rendered:

          Some paragraph text that will contain bulleted and numbered items:
          1) Item one.
             * This is a bullet
             * This is another bullet. This is a long bullet that will demonstrate
               proper bullet text wrapping and indentation.

          2) Item two. Notice that the numbering continued onto two, and did not start over to one.
             a) Sub-item 2.1
             b) Sub-item 2.2
                * This is the first bullet to sub-item 2.2
                * This is the second bullet
                  - This is an indented bullet. The bullet could be another symbol to help
                    show the different level. Also, notice how the bullet text displays
                    proper bullet text wrapping and indentation.
                  - Another indented bullet.

          3) Item three. Notice how the numbering can be continued even though the previous numbering
             was interrupted by a list of bulleted items.

- Move Snippets to topics
!- Implement menu in snippet create/edit form to put snippet in user selected topic

!- Be able to drag a snippet to a topic

- Pin snippets to topics
  - Implement the 'Snip It' button


-------------------- BUGS ---------------------
-
- Don't create snippet if there is no title
